@model SistemaBliss.EN.Empresa

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2 class="titulo">Empresa</h2>
<p class="parrafo">Edita los datos necesarios de la empresa para mantener actualizada la información</p>


<ul class="nav d-flex nav-pills mb-3" id="pills-tab" role="tablist">
    <li class="nav-item" role="presentation">
        <button class="nav-link active" id="pills-home-tab" data-bs-toggle="pill" data-bs-target="#pills-home" type="button" role="tab" aria-controls="pills-home" aria-selected="true">Empresa</button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="pills-profile-tab" data-bs-toggle="pill" data-bs-target="#pills-profile" type="button" role="tab" aria-controls="pills-profile" aria-selected="false">Horarios</button>
    </li>
</ul>
<div class="tab-content" id="pills-tabContent">
    <div class="tab-pane fade show active" id="pills-home" role="tabpanel" aria-labelledby="pills-home-tab" tabindex="0">


        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-inputs mt-4">

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.IdEmpresa)


                <div class="form-group">
                    @Html.LabelFor(model => model.Nombre, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Direccion, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Direccion, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Direccion, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Telefono, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Telefono, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Telefono, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CorreoElectronico, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.CorreoElectronico, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CorreoElectronico, "", new { @class = "text-danger" })
                    </div>
                </div>


            </div>

            <div class="form-group mt-3">
                <button type="submit" class="btn-morado">Guardar</button>
            </div>
        }
    </div>
    <div class="tab-pane fade" id="pills-profile" role="tabpanel" aria-labelledby="pills-profile-tab" tabindex="0">
        <div id="horarios-seccion" class="mt-2">
        </div>
    </div>
</div>




@section scripts {


    <script>
    function CargarHorarios() {
    $.ajax({
        url: '@Url.Action("HorariosLista", "Horario")',
        type: 'GET',
        success: function (data) {
            $('#horarios-seccion').html(data);
        },
        error: function () {
            alert('Error al cargar el listado de horarios.');
        }
    });
    }

    $(document).ready(function() {
        CargarHorarios(); //
    });
    </script>



    @if (TempData["mensaje"] != null)
    {
        <script>
    Swal.fire({
        icon: "@(TempData["tipo"]!= null? TempData["tipo"]: "success")",
        title: "@TempData["mensaje"]",
        showConfirmButton: false,
        timer: 1500
    });
        </script>

        TempData["mensaje"] = null; // Vaciar memoria
    }

}